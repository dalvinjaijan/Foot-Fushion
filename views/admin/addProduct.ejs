<!DOCTYPE HTML>
<html lang="en">


<head>
    <meta charset="utf-8">
    <title>Foot Fushion</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="../admin-assets/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link href="../admin-assets/css/main.css" rel="stylesheet" type="text/css" />
    <!-- Add Cropper.js CSS -->
<link rel="stylesheet" href="https://unpkg.com/cropperjs/dist/cropper.min.css">

<!-- Add jQuery (required by Cropper.js) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Add Cropper.js -->
<script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>

</head>

<body>
    <%- include('../layouts/adminNav.ejs') %>	

    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <form class="searchform">
                    <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="button"> <i class="material-icons md-search"></i></button>
                    </div>
                    <datalist id="search_terms">
                        <option value="Products">
                        <option value="New orders">
                        <option value="Apple iphone">
                        <option value="Ahmed Hassan">
                    </datalist>
                </form>
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    <li class="nav-item">
                        <a class="nav-link btn-icon" href="#">
                            <i class="material-icons md-notifications animation-shake"></i>
                            <span class="badge rounded-pill">3</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link btn-icon darkmode" href="#"> <i class="material-icons md-nights_stay"></i> </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i class="material-icons md-cast"></i></a>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownLanguage" aria-expanded="false"><i class="material-icons md-public"></i></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownLanguage">
                            <a class="dropdown-item text-brand" href="#"><img src="assets/imgs/theme/flag-us.png" alt="English">English</a>
                            <!-- <a class="dropdown-item" href="#"><img src="assets/imgs/theme/flag-fr.png" alt="Français">Français</a>
                            <a class="dropdown-item" href="#"><img src="assets/imgs/theme/flag-jp.png" alt="Français">日本語</a>
                            <a class="dropdown-item" href="#"><img src="assets/imgs/theme/flag-cn.png" alt="Français">中国人</a> -->
                        </div>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount" aria-expanded="false">Admin</a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
                            <a class="dropdown-item" href="#"><i class="material-icons md-perm_identity"></i>Edit Profile</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-danger" href="/admin/logout"><i class="material-icons md-exit_to_app"></i>Logout</a>
                        </div>
                    </li>
                </ul>
            </div>
        </header>
       
        <section class="content-main">
        <form action="/admin/addProduct" method="post" enctype="multipart/form-data" id="myForm">
        
            <div class="row">
                <div class="col-6">
                    <div class="content-header">
                        <h2 class="content-title">Add New Product</h2>
                        <div>
                            <input class="btn btn-md rounded font-sm hover-up" value="Add Product" type="submit"></input>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="row">
                                <!-- <div class="col-md-3">
                                    <h6>1. General info</h6>
                                </div> -->
                                <div class="col-md-9">
                                    <div class="mb-4">
                                        <label class="form-label">Product title</label>
                                        <input type="text" placeholder="Type here" class="form-control" name="name" id="name" onkeyup="nameValidation()">
                                        <span id="nameError"></span>
                                      </div>
                                    <div class="mb-4">
                                        <label class="form-label">Description</label>
                                        <textarea placeholder="Type here" class="form-control" rows="4" name="description"  id="description" onkeyup="descriptionValidation()"></textarea>
                                        <span id="descriptionError"></span>

                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">Category</label>
                                        
                                        <select class="form-select" name="category">
                                            <% category.forEach(function(category) { %>
                                            <option value="<%= category._id %>"><%= category.name %>
                                            </option>
                                            <% }); %>
                                        </select>
                                    </div>
                                </div> <!-- col.// -->
                            </div> <!-- row.// -->
                            <hr class="mb-4 mt-0">
                            <div class="row">
                                <!-- <div class="col-md-3">
                                    <h6>2. Pricing</h6>
                                </div> -->
                                <div class="col-md-9">
                                    <div class="mb-4">
                                        <label class="form-label">Cost in INR</label>
                                        <input type="number" placeholder="00.0" class="form-control" name="price" id="price" onkeyup="priceValidation()">
                                        <span id="priceError"></span>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>  
                                        <input type="number" placeholder="0" class="form-control" name="stock" id="stock" onkeyup="stockValidation()"">
                                        <span id="stockError"></span>
                                    </div>
                                </div> <!-- col.// -->
                            </div> <!-- row.// -->
                            
                            <hr class="mb-4 mt-0">
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Media</h4>
                                </div>
                                <div class="input-upload">
                                    <div id="imgView1_1">
                                        <!-- Original images will be displayed here -->
                                    </div>
                                    <input class="form-control" id="input1" name="file[]" onchange="viewImage1(event),viewImage(event, 1)" type="file" multiple>
                                </div>
                                <div class="image-cropper" style="display:none;">
                                    <!-- Cropped images will be displayed here -->
                                    <div id="croppedImg1_1" class="cropdiv"></div>
                                    <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                </div>
                            </div>
                           
                            <!-- </div> .row end// -->
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </form>
        <p><%=(typeof message!=='undefined')?message:""%></p>
        </section> <!-- content-main end// -->

    </main>
    <script src="../admin-assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="../admin-assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="../admin-assets/js/vendors/select2.min.js"></script>
    <script src="../admin-assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="../admin-assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="../admin-assets/js/main.js" type="text/javascript"></script>


    <script>

const myForm = document.getElementById("myForm");

const name = document.getElementById("name");
const description = document.getElementById("description");
const price = document.getElementById("price");
const stock = document.getElementById("stock");

const nameError = document.getElementById("nameError");
const descriptionError = document.getElementById("descriptionError");
const priceError = document.getElementById("priceError");
const stockError = document.getElementById("stockError");

function nameValidation() {
    const nameValue = name.value.trim();
    const regx = /^[a-zA-Z0-9\s]+$/;
    if (nameValue === "" || !regx.test(nameValue)) {
        nameError.innerHTML = 'Enter a valid product name';
        nameError.style.color = 'red';
        name.style.border = "solid 2px red";
        return false;
    }
    nameError.innerHTML = "";
    nameError.style.color = "green";
    name.style.border = "solid 2px green";
    return true;
}

function descriptionValidation() {
    const descriptionValue = description.value.trim();
    if (descriptionValue === "") {
        descriptionError.innerHTML = 'Description is required';
        descriptionError.style.color = 'red';
        description.style.border = "solid 2px red";
        return false;
    }
    descriptionError.innerHTML = "";
    descriptionError.style.color = "green";
    description.style.border = "solid 2px green";
    return true;
}

function priceValidation() {
    const priceValue = price.value.trim();
    if (priceValue === "") {
        priceError.innerHTML = 'Price is Required';
        priceError.style.color = 'red';
        price.style.border = "solid 2px red";
        return false;
    }
    if (parseFloat(priceValue) <= 0) {
        priceError.innerHTML = 'Price Must be greater than zero';
        priceError.style.color = 'red';
        price.style.border = "solid 2px red";
        return false;
    }
    priceError.innerHTML = "";
    priceError.style.color = "green";
    price.style.border = "solid 2px green";
    return true;
}

function stockValidation() {
    const stockValue = stock.value.trim();
    if (stockValue === "") {
        stockError.innerHTML = 'Stock is Required';
        stockError.style.color = 'red';
        stock.style.border = "solid 2px red";
        return false;
    }
    if (parseInt(stockValue) <= 0) {
        stockError.innerHTML = 'Stock Must be greater than zero';
        stockError.style.color = 'red';
        stock.style.border = "solid 2px red";
        return false;
    }
    stockError.innerHTML = "";
    stockError.style.color = "green";
    stock.style.border = "solid 2px green";
    return true;
}

name.addEventListener('blur', nameValidation);
description.addEventListener('blur', descriptionValidation);

myForm.addEventListener("submit", (event) => {
    event.preventDefault();
    nameValidation();
    descriptionValidation();
    const fileInput = document.getElementById('input1');
    if (!priceValidation() || !stockValidation() || !nameValidation() || !descriptionValidation() || !validateImageFile(fileInput)) {
        return false;
    } else {
        myForm.submit();
    }
});


    </script>

<script>
    function viewImage1(event) {
       
// document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
// }

// function viewImage2(event) {
// document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
// }

// function viewImage3(event) {
// document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
// }function viewImage1(event) {
    const input = event.target;
    const index = input.id.split('input')[1]; // Extract the index from the input ID
    const imagesContainer = document.getElementById('imgView1_' + index);
    

    // Clear any existing images in the container
    imagesContainer.innerHTML = '';

    // Loop through each selected file and create an image element for it
    for (const file of input.files) {
        const image = document.createElement('img');
        image.src = URL.createObjectURL(file);
        imagesContainer.appendChild(image);
    }
}

const allowedExtensions = ['png', 'jpg', 'jpeg', 'svg']; // List of allowed file extensions

function validateImageFile(fileInput) {
    const fileName = fileInput.value.split('\\').pop(); // Get the file name from the input
    const fileExtension = fileName.split('.').pop().toLowerCase(); // Get the file extension

    if (!allowedExtensions.includes(fileExtension)) {
        // If the file extension is not in the allowedExtensions array
        alert('Only image files (PNG, JPG, JPEG, SVG) are allowed.');
        fileInput.value = ''; // Clear the file input
        return false;
    }

    return true; // Return true if the file extension is allowed
}

// // Add an event listener to each file input element
document.getElementById('input1').addEventListener('change', function(event) {
    if (!validateImageFile(this)) {
        // If the file extension is not allowed, prevent further actions
        event.preventDefault();
    }
});

// document.getElementById('input2').addEventListener('change', function(event) {
//     if (!validateImageFile(this)) {
//         // If the file extension is not allowed, prevent further actions
//         event.preventDefault();
//     }
// });

// document.getElementById('input3').addEventListener('change', function(event) {
//     if (!validateImageFile(this)) {
//         // If the file extension is not allowed, prevent further actions
//         event.preventDefault();
//     }
// });

</script>

<!-- <script>
    function viewImage(event, index) {
        let input = event.target;
        let reader = new FileReader();
    
        reader.onload = function() {
          let dataURL = reader.result;
          let image = document.getElementById('imgView' + index);
          image.src = dataURL;
    
          // Initialize Cropper.js on the image
          let cropper = new Cropper(image, {
            aspectRatio: 1 / 1, // Set the aspect ratio to 1:1 for square images
            viewMode: 1, // Set the view mode to crop box
            guides: true, // Show the crop guides
            background: false, // Do not show the background behind the image
            autoCropArea: 1, // Set the initial crop area to cover the whole image
            zoomable: true // Disable zooming to keep the image size fixed
          });
    
          // Show the image cropper container
          let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
          cropperContainer.style.display = 'block';
    
          // Update the cropped image when the "Save" button is clicked
          let saveButton = document.querySelector('#saveButton' + index);
          saveButton.addEventListener('click', async function() {
            let croppedCanvas = cropper.getCroppedCanvas({
              width: 1500, 
              height: 1500 
            });
            let croppedImage = document.getElementById("croppedImg" + index);
            croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
    
            // Generate a unique name for the cropped image file based on the current timestamp
            let timestamp = new Date().getTime();
            let fileName = `cropped-img-${timestamp}-${index}.png`;
    
            await croppedCanvas.toBlob(blob => {
              let input = document.getElementById('input' + index)
              let imgFile = new File([blob], fileName, blob)
              const fileList = new DataTransfer();
              fileList.items.add(imgFile);
              input.files = fileList.files
            });
            // cropperContainer.style.display = 'none';
          });
    
        };
    
        reader.readAsDataURL(input.files[0]);
      }
    </script> -->
    <script>
       function viewImage(event, index) {
    const input = event.target;
    const imagesContainer = document.getElementById(`imgView1_${index}`); // Dynamic ID

    while (imagesContainer.firstChild) {
        imagesContainer.removeChild(imagesContainer.firstChild);
    }

    for (const file of input.files) {
        const reader = new FileReader();
        reader.onload = function() {
            const image = document.createElement('img');
            image.src = reader.result;
            imagesContainer.appendChild(image);

            // Initialize Cropper.js on the image
            const cropper = new Cropper(image, {
                aspectRatio: 1 / 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true
            });

            // Show the image cropper container
            const cropperContainer = document.querySelector(`#croppedImg1_${index}`).parentNode; // Dynamic ID
            cropperContainer.style.display = 'block';

            // Update the cropped image when the "Save" button is clicked
            const saveButton = document.querySelector(`#saveButton1_${index}`);
            saveButton.addEventListener('click', async function() {
                const croppedCanvas = cropper.getCroppedCanvas({
                    width: 1500,
                    height: 1500
                });
                const croppedImage = document.createElement('img');
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                imagesContainer.appendChild(croppedImage);

                // Hide the image cropper container
                cropperContainer.style.display = 'none';
            });
        };
        reader.readAsDataURL(file);
    }
}

    </script>
    

</body>


</html>